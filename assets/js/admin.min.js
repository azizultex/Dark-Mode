/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./assets/js/admin.js":
/*!****************************!*\
  !*** ./assets/js/admin.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./comoponents/notice */ "./assets/js/comoponents/notice.js");

;

(function () {
  var app = {
    init: function init() {
      app.initDarkMode();
      app.handleExcludes();
      app.checkEditorDarkmode();
      app.checkOnlyDarkmode();
      var btnSwitch = document.querySelector('.dark-mode-switch');

      if (btnSwitch) {
        btnSwitch.addEventListener('click', app.handleSwitchToggle);
      }

      window.addEventListener('dark_mode_init', app.checkDarkMode); //Admin Darkmode Settings Toggle

      var adminDarkmode = document.querySelector('.admin_darkmode input[type=checkbox]');

      if (adminDarkmode) {
        adminDarkmode.addEventListener('change', app.checkEditorDarkmode);
      } //Only Darkmode Settings Toggle


      var onlyDarkmode = document.querySelector('.only_darkmode input[type=checkbox]');

      if (onlyDarkmode) {
        onlyDarkmode.addEventListener('change', app.checkOnlyDarkmode);
      }
    },
    checkOnlyDarkmode: function checkOnlyDarkmode() {
      var checkBox = document.querySelector('.only_darkmode input[type=checkbox]');

      if (!checkBox) {
        return;
      }

      var is_darkmode_enabled = checkBox.checked;

      if (is_darkmode_enabled) {
        document.querySelector('.admin_darkmode').style.display = 'none';
        document.querySelector('.markdown_editor').style.display = 'none';
        document.querySelector('.productivity_sound').style.display = 'none';
        document.querySelector('.new_fonts').style.display = 'none';
      } else {
        document.querySelector('.admin_darkmode').style.display = 'revert';
        document.querySelector('.markdown_editor').style.display = 'revert';
        document.querySelector('.productivity_sound').style.display = 'revert';
        document.querySelector('.new_fonts').style.display = 'revert';
      }
    },
    checkEditorDarkmode: function checkEditorDarkmode() {
      var checkBox = document.querySelector('.admin_darkmode input[type=checkbox]');

      if (!checkBox) {
        return;
      }

      var is_darkmode_enabled = checkBox.checked;

      if (is_darkmode_enabled) {
        if (document.querySelector('.classic_editor_darkmode')) {
          document.querySelector('.classic_editor_darkmode').style.display = 'revert';
        }

        if (document.querySelector('.gutenberg_darkmode')) {
          document.querySelector('.gutenberg_darkmode').style.display = 'revert';
        }
      } else {
        if (document.querySelector('.classic_editor_darkmode')) {
          document.querySelector('.classic_editor_darkmode').style.display = 'none';
        }

        if (document.querySelector('.gutenberg_darkmode')) {
          document.querySelector('.gutenberg_darkmode').style.display = 'none';
        }
      }
    },
    checkDarkMode: function checkDarkMode() {
      document.querySelector('.dark-mode-switch').classList.toggle('active');
    },
    initDarkMode: function initDarkMode() {
      var is_saved = localStorage.getItem('dark_mode_active');

      if (!is_saved) {
        is_saved = 1;
      }

      var is_gutenberg = document.querySelector('body').classList.contains('block-editor-page');

      if (is_saved && is_saved != 0) {
        document.querySelector('html').classList.add('dark-mode-active');
        document.querySelector('.dark-mode-switch').classList.toggle('active');
        DarkMode.enable();
      }
    },
    handleSwitchToggle: function handleSwitchToggle(e) {
      e.preventDefault();
      document.querySelector('html').classList.toggle('dark-mode-active');
      document.querySelector('.dark-mode-switch').classList.toggle('active');
      var is_saved = document.querySelector('html').classList.contains('dark-mode-active') ? 1 : 0;

      if (is_saved) {
        DarkMode.enable();
      } else {
        DarkMode.disable();
      }

      localStorage.setItem('dark_mode_active', is_saved);
    },
    handleExcludes: function handleExcludes() {
      var elements = document.querySelectorAll('.dark-mode-ignore, .color-palette, .health-check-accordion-heading');

      if (!elements) {
        return;
      }

      elements.forEach(function (element) {
        element.classList.add('dark-mode-ignore');
        var children = element.querySelectorAll('*');
        children.forEach(function (child) {
          child.classList.add('dark-mode-ignore');
        });
      });
    }
  };
  document.addEventListener('DOMContentLoaded', app.init);
})();

/***/ }),

/***/ "./assets/js/comoponents/notice.js":
/*!*****************************************!*\
  !*** ./assets/js/comoponents/notice.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


;

(function ($) {
  $(document).ready(function () {
    //Handle the update notice
    $(document).on('click', '.wp-markdown-editor-update-notice .notice-dismiss', function () {
      wp.ajax.send('wp_markdown_editor_update_notice', {
        success: function success() {},
        error: function error(_error) {
          return console.log(_error);
        }
      });
    });
    /**--------------Review Notice----------------**/
    //handle review notice remind_later

    $('.wp-markdown-editor-review-notice .remind_later').on('click', function () {
      $('.notice-overlay-wrap').css('display', 'flex');
    }); //close the review notice

    $('.wp-markdown-editor-review-notice .close-notice').on('click', function () {
      $(this).parents('.notice-overlay-wrap').css('display', 'none');
    });
    $('.wp-markdown-editor-review-notice .notice-overlay-actions a, .wp-markdown-editor-review-notice .notice-actions a.hide_notice, .wp-markdown-editor-review-notice .notice-dismiss').on('click', function () {
      $(this).parents('.wp-markdown-editor-review-notice').slideUp();
      var value = $(this).data('value');

      if (!value) {
        value = 7;
      }

      wp.ajax.send('wp_markdown_editor_review_notice', {
        data: {
          value: value
        },
        success: function success() {},
        error: function error(_error2) {
          return console.log(_error2);
        }
      });
    });
    /*-- Affiliate Notice --*/
    //close the affiliate notice

    $('.wp-markdown-editor-affiliate-notice .close-notice').on('click', function () {
      $(this).parents('.notice-overlay-wrap').css('display', 'none');
    });
    $('.wp-markdown-editor-affiliate-notice .dashicons-dismiss').on('click', function (e) {
      e.preventDefault();
      $('.wp-markdown-editor-affiliate-notice .notice-overlay-wrap').css('display', 'flex');
    });
    $(".wp-markdown-editor-affiliate-notice .notice-overlay-actions a, .wp-markdown-editor-affiliate-notice .notice-dismiss, .wp-markdown-editor-affiliate-notice .notice-actions a.hide_notice").on('click', function () {
      $(this).parents('.wp-markdown-editor-affiliate-notice').slideUp();
      var value = $(this).data('value');

      if (!value) {
        value = 7;
      }

      wp.ajax.send('wp_markdown_editor_affiliate_notice', {
        data: {
          value: value
        },
        success: function success() {},
        error: function error(_error3) {
          return console.log(_error3);
        }
      });
    });
  });
})(jQuery);

/***/ }),

/***/ 0:
/*!**********************************!*\
  !*** multi ./assets/js/admin.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! C:\xampp\htdocs\wp-dark-mode\wp-content\plugins\dark-mode\assets\js\admin.js */"./assets/js/admin.js");


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,